/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&gresc { mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        prefix {
            bindings = <&kp LC(X)>;
            key-positions = <47 48>;
            timeout-ms = <90>;
        };

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <55 56>;
            timeout-ms = <90>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <56 57>;
            timeout-ms = <90>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <55 57>;
            timeout-ms = <90>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <56 54>;
            timeout-ms = <90>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <32 33>;
            timeout-ms = <80>;
        };

        aster {
            bindings = <&kp ASTRK>;
            key-positions = <54 55>;
            timeout-ms = <90>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <41 43>;
            timeout-ms = <90>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <50 51>;
            timeout-ms = <90>;
        };

        left_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <41 42>;
            timeout-ms = <90>;
        };

        right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <42 43>;
            timeout-ms = <90>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <56 58>;
            timeout-ms = <90>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE         &kp N1              &kp N2                &kp N3          &kp N4          &kp N5  &kp N6                                                                                                                         &kp N6           &kp N7  &kp N8              &kp N9           &kp N0               &kp MINUS             &kp EQUAL
&kp TAB           &lt 4 Q             &kp W                 &kp E           &kp R           &kp T   &kp Y                                                                                                                          &kp T            &kp Y   &kp U               &kp I            &kp O                &kp P                 &kp BSLH
&kp ESCAPE        &hm LEFT_CONTROL A  &hm LEFT_SHIFT S      &hm LEFT_ALT D  &hm LEFT_GUI F  &kp G   &mo 2      &mt LG(LEFT_BRACKET) LC(PAGE_UP)  &mt LG(RIGHT_BRACKET) LC(PAGE_DOWN)          &mt HOME PAGE_UP  &mt END PAGE_DOWN  &mo 2            &kp H   &hm LEFT_SHIFT J    &hm RIGHT_ALT K  &hm LEFT_GUI L       &hm LEFT_CONTROL SQT  &kp SEMI
&kp LSHFT         &kp Z               &kp X                 &kp C           &kp V           &kp B                                                &mt LG(LC(LA(LS(SQT)))) LC(LA(LS(SQT)))      &kp LG(LS(Z))                                         &kp N   &kp M               &lt 6 COMMA      &kp DOT              &kp SLASH             &kp RSHFT
&kp LEFT_CONTROL  &mo 5               &hm LEFT_SHIFT LG(X)  &mt LALT LG(C)  &mt LCMD LG(V)          &kp SPACE  &kp LEFT_SHIFT                    &mt LG(LS(N4)) LG(LS(LC(NUMBER_4)))          &kp LG(Z)         &kp ENTER          &lt 1 RIGHT_GUI          &mt LCMD BACKSPACE  &mt LALT LG(Z)   &mt RSHFT LG(LS(Z))  &mo 7                 &kp LEFT_CONTROL
            >;
        };

        layer_right {
            bindings = <
&none             &none  &none           &none         &none         &none  &none                                            &none  &none  &none     &none         &none      &none  &none
&none             &none  &none           &none         &none         &none  &none                                            &none  &none  &none     &none         &none      &none  &none
&none             &none  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_GUI  &none  &none   &none           &none      &none  &none  &none  &none  &none     &kp UP_ARROW  &none      &none  &none
&kp LEFT_SHIFT    &none  &none           &none         &none         &none                          &none      &none                &none  &kp LEFT  &kp DOWN      &kp RIGHT  &none  &none
&kp LEFT_CONTROL  &none  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_GUI         &trans  &kp LEFT_SHIFT  &none      &none  &none  &none         &none     &none         &none      &none  &none
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans                                                            &trans                  &tog 0      &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                       &bootloader             &none       &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &bt BT_SEL 1  &none      &bt BT_SEL 1  &bt BT_SEL 3  &rgb_ug RGB_MEFS_CMD 5  &none       &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                                    &none      &none                                               &bt BT_CLR  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none         &none      &none         &bl BL_TOG    &rgb_ug RGB_TOG                     &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_left {
            bindings = <
&none             &none  &none           &mt LG(LS(N4)) LG(LS(LC(N4)))  &mt LG(LC(LA(LS(SQT)))) LC(LA(LS(SQT)))  &none  &none                                                               &none                     &none  &none                          &none                              &none                            &none              &none
&none             &none  &none           &none                          &none                                    &none  &none                                                               &kp C_VOLUME_UP           &none  &none                          &kp LG(LC(LA(I)))                  &kp LG(LC(LA(D)))                &kp LG(LC(LA(P)))  &none
&none             &none  &kp LEFT_GUI    &kp LEFT_ALT                   &kp LEFT_SHIFT                           &none  &none  &bt BT_SEL 1  &bt BT_SEL 3      &bt BT_SEL 0  &kp LG(LC(Q))  &mt C_MUTE C_VOLUME_DOWN  &none  &mt LG(LS(LEFT)) LA(LS(LEFT))  &mt LG(UP_ARROW) LA(UP_ARROW)      &mt LG(LS(RIGHT)) LA(LS(RIGHT))  &kp LG(LC(LA(V)))  &none
&none             &none  &none           &none                          &none                                    &none                       &none             &none                                                  &none  &mt LG(LEFT) LA(LEFT)          &mt LG(DOWN_ARROW) LA(DOWN_ARROW)  &mt LG(RIGHT) LA(RIGHT)          &none              &none
&kp LEFT_CONTROL  &none  &kp LEFT_SHIFT  &kp LEFT_ALT                   &kp LEFT_COMMAND                                &none  &none         &none             &none         &kp LS(ENTER)  &none                            &none                          &none                              &none                            &none              &none
            >;
        };

        layer_special {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none         &none           &none          &none             &none      &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &kp PERCENT   &kp AMPERSAND   &kp PIPE       &kp GRAVE         &kp TILDE  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &kp HASH      &kp CARET       &kp DOLLAR     &kp EQUAL         &kp PLUS   &none
&none  &none  &none  &none  &none  &none                &none      &none                &kp ASTERISK  &kp UNDERSCORE  &kp LESS_THAN  &kp GREATER_THAN  &none      &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none                &none           &none          &none             &none      &none
            >;
        };

        layer_browser {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none                &none                 &none              &none                  &none              &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &mt LG(LS(T)) LG(T)  &kp LG(LC(LA(W)))     &kp LG(LC(LA(C)))  &kp LG(LC(LA(E)))      &kp LG(LC(LA(F)))  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &kp LG(LS(A))        &kp LG(LEFT_BRACKET)  &mt HOME PAGE_UP   &kp LG(RIGHT_BRACKET)  &kp LG(LC(LA(S)))  &none
&none  &none  &none  &none  &none  &none                &none      &none                &kp LG(GRAVE)        &kp LC(PAGE_UP)       &mt END PAGE_DOWN  &kp LC(PAGE_DOWN)      &none              &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none                       &none                 &none              &none                  &none              &none
            >;
        };

        layer_numpad {
            bindings = <
&none  &none  &none   &none   &none   &none          &none                                   &none  &none  &none           &none  &none  &none  &none
&none  &none  &kp N7  &kp N8  &kp N9  &kp N0         &none                                   &none  &none  &none           &none  &none  &none  &none
&none  &none  &kp N4  &kp N5  &kp N6  &kp DELETE     &none   &none  &none      &none  &none  &none  &none  &kp LEFT_SHIFT  &none  &none  &none  &none
&none  &none  &kp N1  &kp N2  &kp N3  &kp BACKSPACE                 &none      &none                &none  &none           &none  &none  &none  &none
&none  &none  &none   &none   &none                  &kp N0  &none  &none      &none  &none  &none         &none           &none  &none  &none  &none
            >;
        };

        layer_window {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none                          &none                                      &none                            &none  &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none                          &none                                      &none                            &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &kp LG(LC(LEFT))               &mt LC(LA(LS(UP_ARROW))) LC(LA(UP_ARROW))  &kp LG(LC(RIGHT))                &none  &none
&none  &none  &none  &none  &none  &none                &none      &none                &none  &mt LC(LS(LEFT)) LC(LA(LEFT))  &kp LC(LA(DOWN))                           &mt LC(LS(RIGHT)) LC(LA(RIGHT))  &none  &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none         &none                          &none                                      &none                            &none  &none
            >;
        };
    };
};
