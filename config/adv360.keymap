/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

&gresc { mods = <(MOD_LGUI|MOD_RGUI)>; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        prefix {
            bindings = <&kp LC(X)>;
            key-positions = <47 48>;
            timeout-ms = <85>;
        };

        lang {
            bindings = <&kp RCMD>;
            key-positions = <41 42>;
            timeout-ms = <70>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <48 49>;
            timeout-ms = <80>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <50 49>;
            timeout-ms = <80>;
        };

        line_select {
            bindings = <&kp LS(V)>;
            key-positions = <50 48>;
            timeout-ms = <80>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <44 45>;
            timeout-ms = <70>;
        };

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <55 56>;
            timeout-ms = <75>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <56 57>;
            timeout-ms = <75>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <54 55>;
            timeout-ms = <80>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <55 57>;
            timeout-ms = <75>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <58 56>;
            timeout-ms = <75>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&gresc      &kp N1          &kp N2          &kp N3       &kp N4          &kp N5  &mo 3                                                                        &kp N6     &kp N7  &kp N8         &kp N9          &kp N0           &kp MINUS  &kp EQUAL
&kp TAB     &kp Q           &kp W           &kp E        &kp R           &kp T   &kp Y                                                                        &kp T      &kp Y   &kp U          &kp I           &kp O            &kp P      &kp BSLH
&kp ESCAPE  &kp A           &kp S           &kp D        &kp F           &kp G   &kp H      &kp LEFT_GUI  &kp LALT       &mt HOME PAGE_DOWN  &mt END PAGE_UP  &kp B      &kp H   &kp J          &kp K           &kp L            &kp SQT    &kp SEMI
&kp LSHFT   &kp Z           &kp X           &kp C        &kp V           &kp B                            &kp LG(C)      &kp LG(LS(Z))                                   &kp N   &kp M          &kp COMMA       &kp DOT          &kp FSLH   &kp RSHFT
&mo 2       &mt LCTRL LEFT  &mt LSHFT DOWN  &mt LALT UP  &mt LCMD RIGHT          &kp SPACE  &mo 1         &kp LG(V)      &kp LG(Z)           &kp BACKSPACE    &kp ENTER          &mt LCMD RCMD  &mt LALT COMMA  &mt RSHFT GRAVE  &kp LCTRL  &mo 2
            >;
        };

        layer_pad {
            bindings = <
&trans  &trans     &trans     &trans                     &trans                       &trans               &trans                                                      &trans         &trans  &trans                         &trans                         &trans                           &trans             &trans
&trans  &trans     &kp LG(W)  &mt LG(LS(DOWN)) LG(DOWN)  &mt LG(LS(UP)) LG(UP_ARROW)  &mt LG(LS(T)) LG(T)  &none                                                       &none          &trans  &kp LG(LBKT)                   &mkp MB1                       &kp LG(RBKT)                     &trans             &trans
&trans  &kp LG(A)  &trans     &mt LG(LS(LEFT)) LG(LEFT)  &mt LG(LS(RIGHT)) LG(RIGHT)  &kp LS(G)            &kp LG(LS(A))  &sk LS(LCMD)  &trans      &trans  &trans     &none          &trans  &mt LG(LBKT) LG(LS(LBKT))      &mt LC(LA(LS(UP))) LC(LA(UP))  &mt LG(RBKT) LG(LS(RBKT))        &mt HOME PAGE_UP   &trans
&trans  &trans     &trans     &mt LA(LS(LEFT)) LA(LEFT)  &mt LA(LS(RIGHT)) LA(RIGHT)  &mt LC(V) LS(V)                                   &trans      &trans                            &trans  &mt LC(LS(LEFT)) LA(LC(LEFT))  &mt LG(M) LC(LA(DOWN))         &mt LC(LS(RIGHT)) LC(LA(RIGHT))  &mt END PAGE_DOWN  &trans
&mo 2   &trans     &trans     &trans                     &trans                                            &trans         &mo 1         &trans      &trans  &kp LA(S)  &kp LS(ENTER)          &kp LG(BACKSPACE)              &kp LA(BACKSPACE)              &trans                           &kp LG(GRAVE)      &mo 2
            >;
        };

        layer_fn___ {
            bindings = <
&kp LG(GRAVE)  &kp LC(LA(LG(S)))  &kp LC(LA(LG(W)))  &mt LS(LG(N4)) LG(LS(LC(N4)))  &kp LS(N4)  &kp LG(LS(N5))  &kp LS(N6)                                                                                                                            &kp LC(LA(LG(C)))    &kp LC(LA(LG(E)))  &kp LC(LA(LG(I)))  &kp LC(LA(LG(P)))   &kp LG(LS(A))  &kp LA(SPACE)   &kp LA(S)
&kp LC(TAB)    &kp LC(Q)          &kp LC(W)          &kp LC(E)                      &kp LC(R)   &kp LC(T)       &trans                                                                                                                                &kp C_VOL_UP         &kp LC(Y)          &kp LC(U)          &kp LC(I)           &kp LC(P)      &mt LC(P) LBKT  &kp RBKT
&trans         &kp LC(A)          &kp LC(S)          &kp LC(D)                      &kp LC(F)   &kp LC(G)       &trans      &mt LC(LS(LEFT)) LC(LA(LEFT))  &mt LC(LS(RIGHT)) LC(LA(RIGHT))      &mt LG(LBKT) LG(LS(LBKT))  &mt LG(RBKT) LG(LS(RBKT))  &mt C_MUTE C_VOL_DN  &kp LC(H)          &kp LC(J)          &mt LC(K) UP_ARROW  &kp LC(L)      &kp LC(K)       &kp LC(L)
&trans         &kp LC(Z)          &kp LC(X)          &kp LC(C)                      &kp LC(V)   &kp LC(B)                                                  &mt LC(LA(LS(UP))) LC(LA(UP))        &kp LG(LS(A))                                                              &kp LC(N)          &kp LEFT_ARROW     &kp DOWN            &kp RIGHT      &trans          &trans
&trans         &trans             &trans             &trans                         &trans                      &trans      &trans                         &kp LC(LA(DOWN))                     &trans                     &mkp MB1                   &mkp MB2                                &trans             &trans              &trans         &kp LG(GRAVE)   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans                                                     &trans                  &tog 1      &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                &bootloader             &none       &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_SEL 1  &bt BT_SEL 3  &rgb_ug RGB_MEFS_CMD 5  &none       &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                               &bt BT_CLR  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none         &bl BL_TOG    &rgb_ug RGB_TOG                     &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
