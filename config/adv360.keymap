/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&gresc { mods = <(MOD_LGUI|MOD_RGUI)>; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        prefix {
            bindings = <&kp LC(X)>;
            key-positions = <47 48>;
            timeout-ms = <90>;
        };

        lang {
            bindings = <&kp RCMD>;
            key-positions = <41 42>;
            timeout-ms = <80>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <48 49>;
            timeout-ms = <85>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <50 49>;
            timeout-ms = <85>;
        };

        line_select {
            bindings = <&kp LS(V)>;
            key-positions = <50 48>;
            timeout-ms = <80>;
        };

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <55 56>;
            timeout-ms = <90>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <56 57>;
            timeout-ms = <90>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <71 72>;
            timeout-ms = <80>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <55 57>;
            timeout-ms = <90>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <58 56>;
            timeout-ms = <90>;
        };

        bsp_lalt {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <40 41>;
            timeout-ms = <90>;
        };

        dot {
            bindings = <&kp DOT>;
            key-positions = <54 55>;
            timeout-ms = <90>;
        };

        bsp_lg {
            bindings = <&kp CARET>;
            key-positions = <22 23>;
            timeout-ms = <90>;
        };

        aster {
            bindings = <&kp LS(ASTRK)>;
            key-positions = <23 25>;
            timeout-ms = <90>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <41 43>;
            timeout-ms = <90>;
        };

        lang_left {
            bindings = <&kp RCMD>;
            key-positions = <50 51>;
            timeout-ms = <80>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&gresc      &kp N1              &kp N2          &kp N3            &kp N4          &kp N5  &kp N6                                                                              &kp N6     &kp N7  &kp N8              &kp N9            &kp N0           &kp MINUS               &kp EQUAL
&kp TAB     &kp Q               &kp W           &kp E             &kp R           &kp T   &kp Y                                                                               &kp T      &kp Y   &kp U               &kp I             &kp O            &kp P                   &kp BSLH
&kp ESCAPE  &hm LEFT_GUI A      &hm LEFT_ALT S  &hm LEFT_SHIFT D  &lt 3 F         &kp G   &kp H                 &kp LEFT_GUI  &mo 2          &mt HOME PG_UP  &mt END DOWN     &kp B      &kp H   &lt 3 J             &hm LEFT_SHIFT K  &hm LEFT_ALT L   &hm LEFT_COMMAND SQT    &kp SEMI
&kp LSHFT   &hm LEFT_CONTROL Z  &kp X           &kp C             &kp V           &kp B                                       &kp LG(C)      &kp LG(LS(Z))                               &kp N   &kp M               &kp COMMA         &kp DOT          &hm LEFT_CONTROL SLASH  &kp RSHFT
&mo 1       &mt LCTRL LEFT      &mt LSHFT DOWN  &mt LALT UP       &mt LCMD RIGHT          &mt LEFT_SHIFT SPACE  &lt 1 SPACE   &kp LG(V)      &kp LG(Z)       &lt 1 BACKSPACE  &kp ENTER          &mt LCMD BACKSPACE  &mt LALT DOT      &mt RSHFT GRAVE  &kp LCTRL               &mo 1
            >;
        };

        layer_fn___ {
            bindings = <
&kp LG(GRAVE)  &kp LC(LA(LG(S)))  &kp LC(LA(LG(W)))  &mt LS(LG(N4)) LG(LS(LC(N4)))  &kp LA(LC(LG(C)))              &kp LA(LC(LG(E)))                &kp LA(LC(LG(F)))                                                                       &trans               &trans             &trans             &trans             &trans             &trans             &trans
&kp LC(TAB)    &kp LG(Q)          &kp LG(W)          &trans                         &kp LG(R)                      &kp LG(T)                        &bt BT_SEL 3                                                                            &kp C_VOL_UP         &trans             &kp LA(LC(LG(V)))  &kp LA(LC(LG(I)))  &kp LA(LC(LG(D)))  &kp LA(LC(LG(P)))  &kp LA(LC(LG(O)))
&trans         &kp LGUI           &kp LALT           &kp LSHFT                      &mt LC(LA(LS(UP))) LC(LA(UP))  &mt LG(LBKT) LG(LS(LBKT))        &mt LG(RBKT) LG(LS(RBKT))  &bt BT_SEL 1  &bt BT_SEL 3      &bt BT_SEL 0  &kp LG(GRAVE)  &mt C_MUTE C_VOL_DN  &mt HOME PAGE_UP   &trans             &kp UP             &kp LG(L)          &trans             &kp LA(SPACE)
&trans         &trans             &trans             &mt LC(LS(LEFT)) LC(LA(LEFT))  &mt LG(M) LC(LA(DOWN))         &mt LC(LS(RIGHT)) LC(LA(RIGHT))                                           &trans            &trans                                            &mt END PAGE_DOWN  &kp LEFT           &kp DOWN           &kp RIGHT          &trans             &kp LA(S)
&trans         &trans             &trans             &trans                         &trans                                                          &kp LEFT_SHIFT             &trans        &trans            &trans        &trans         &trans                                  &trans             &trans             &trans             &kp LG(GRAVE)      &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans                                                     &trans                  &tog 0      &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                &bootloader             &none       &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_SEL 1  &bt BT_SEL 3  &rgb_ug RGB_MEFS_CMD 5  &none       &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                               &bt BT_CLR  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none         &bl BL_TOG    &rgb_ug RGB_TOG                     &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_num {
            bindings = <
&trans     &trans        &trans        &trans          &trans  &trans  &trans                                      &trans  &trans        &trans        &trans  &trans  &kp BACKSPACE  &trans
&kp GRAVE  &kp N1        &kp N2        &kp N3          &kp N4  &kp N5  &kp N6                                      &trans  &kp NUMBER_6  &kp N7        &kp N8  &kp N9  &kp N0         &kp EQUAL
&trans     &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans        &kp N4        &kp N5  &kp N6  &trans         &trans
&trans     &trans        &trans        &trans          &trans  &trans                  &trans      &trans                  &trans        &kp NUMBER_1  &kp N2  &kp N3  &trans         &trans
&trans     &trans        &trans        &trans          &trans          &trans  &trans  &trans      &trans  &trans  &kp N0                &kp N0        &kp N0  &trans  &trans         &trans
            >;
        };
    };
};
